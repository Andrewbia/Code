/*
 * Morse Code receiver app information:
 *
 * Function: messageFinished(): stops the capturing process
 *
 *     You can call this function to let the app know that the 
 *     end-of-transmission signal has been received.
 *
 * -------------------------------------------------------
 *
 * ID: messageField: id of the message text area
 *
 *     This will be a textarea element where you can display
 *     the recieved message for the user.
 * 
 * -------------------------------------------------------
 *
 * ID: restartButton: id of the Restart button
 *
 *     This is a button element.  When clicked this should 
 *     cause your app to reset its state and begin recieving
 *     a new message.
 *
 */


// ADD YOUR ADDITIONAL FUNCTIONS AND GLOBAL VARIABLES HERE


var morseCodeTable = ['a', "._", 'b', "_...", 'c', "_._.", 'd', "_..", 'e', ".", 'f', ".._.", 'g', "__.", 'h', "....", 'i', "..", 'j', ".___", 'k', "_._", 'l', "._..", 'm', "__", 'n', "_.", 'o', "___", 'p', ".__.", 'q', "__._", 'r', "._.", 's', "...", 't', "_", 'u', ".._", 'v', "..._", 'w', ".__", 'x', "_.._", 'y', "_.__", 'z', "__..", '0', "_____", '1', ".____", '2', "..___", '3', "...__", '4', "...._", '5', ".....", '6', "_....", '7', "__...", '8', "___..", '9', "____.", '(', "_.__.", ')', "_.__._", '"', "_..._", '=', "_..._", "'", ".____.", '/', "_.._.", '+', "._._.", ':', "___...", '.', "._._._", ',', "__..__", '?', "..__..", '-', "_..._", '@', ".__._.", '$', "..._.._", '_', "..__._", '!', "_._.__", '\n', "._._", 'SK', "..._._"]

//Sets all variables to zero to begin

var On = 0;
var Off = 0;
var codeArray = [];
var dotdashArray = [];
var str = ""
var messageFieldRef = document.getElementById("messageField");
var realString = ""

// Restart Button (sets all variables to zero in order to restart function)

document.getElementById('restartButton').onclick = function () {
	dotdashArray = [];
	codeArray = [];
	str = "";
	realString = ""
	messageFieldRef.innerHTML = ""
}





/*
 * This function is called once per unit of time with camera image data.
 * 
 * Input : Image Data. An array of integers representing a sequence of pixels.
 *         Each pixel is representing by four consecutive integer values for 
 *         the 'red', 'green', 'blue' and 'alpha' values.  See the assignment
 *         instructions for more details.
 * Output: You should return a boolean denoting whether or not the image is 
 *         an 'on' (red) signal.
 */
function decodeCameraImage(data) {

	var blueCount = 0 //sets initial blue pixel count to zero
    var redCount = 0 //sets initial red pixel count to zero
	
    
	for (var i = 2; i < data.length; i = i + 4)	//i represents blue colour in pixel
	{
		var j = 0; j = j + 4; //j represents red colour in pixel
		
        if (data[i] > data[j]) 	//if blue colour is greater than red colour
            {
        	   blueCount++; //Increases Blue Pixel Count
            }
        else
            {
                redCount++; //Increases Red Pixel Count
            }
    }

    if (redCount > blueCount) { //if more red than blue
		if (On === 0) 
		{codeArray.push(Off); 
			if (Off <= 2) //Inter Element Space
				{
					dotdashArray.push('') 
					str = dotdashArray.join('')
				}
			else if (Off <= 6) //Inter Character Space
				{
					str = dotdashArray.join('')
					dotdashArray = [] //Resets Morse Array to []
					var m = 0; 
						for (var n = 1; n < morseCodeTable.length; n = n + 2) //Counts through MorseCodeTable for morse elements
							{
								if (morseCodeTable[n] == str){
									realString += morseCodeTable[m]} //If morse code represents a letter, return that letter in 'realString'
								else {}
								m = m + 2; //counts through morseCodeTable for letter elements
								
								
							}
				}
		 	else //Inter Word Space
				{
					str = dotdashArray.join('')
					dotdashArray = [] //Resets Morse Array to []
					var m = 0;
						for (var n = 1; n < morseCodeTable.length; n = n + 2) //Counts through MorseCodeTable for morse elements
							{ 
								if (morseCodeTable[n] == str){
									realString += morseCodeTable[m] + " "} //If morse code represents a letter, return that letter in 'realString'
								else {}
								m = m + 2; //counts through morseCodeTable for letter elements
							}
				}
		 
		 	if (str == "..._._"){
				messageFinished()} //if 'str' = message finised code, call the function 'messageFinished'
		 	else {}
			
			messageFieldRef.innerHTML = realString; //Display 'realString' in message field
		 
		}
		
		else
		{}
		On++
		Off = 0
        return true; //Returns That Image is mostly Red
    }
    else {
		if (Off === 0) 
		{codeArray.push(On);
			if (On <= 2) //
				{
					dotdashArray.push('.') //Adds a dot to morse code string
				}
			else
				{
					dotdashArray.push('_') //Adds a dash to morse code string
				}
		 	str = dotdashArray.join('')
			
			if (str == "..._._"){
				messageFinished()} //if 'str' = message finised code, call the function 'messageFinished'
		 	else {}
		 
		 
		}
		else
		{}	
		Off++ 
		On = 0
        return false; //Returns That Image is mostly B/ue
	}
	
}



